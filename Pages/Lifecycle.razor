@page "/Lifecycle"
@using BlazorServerLifeCycles.Pages.LearnBlazor.LearnBlazorComponents
@using System.Threading

<h3 class="display-6 text-center">Lifecycle</h3>
<hr>

<br>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<p class="lead">Current Count : @currentCount</p>
<p class="lead">@Count <button class="btn btn-info" @onclick="StartCountdown">Click Me</button></p>
<br>

<div class="border p-4 m-4">
    <_Lifecycle CountValue="@currentCount"></_Lifecycle>
</div>

@foreach(var item in EventType)
{
    @item
    <hr>
}

@code {
    private int Count {get; set;} = 5;
    
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    List<string> EventType = new List<string>();

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }
    
    protected async override Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
    }
    
    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }
    
    protected async override Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender is called");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
    }
    
    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if(Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}
